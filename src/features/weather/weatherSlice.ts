import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchWeather } from './weatherAPI';

export interface WeatherState {
  date: Date;
  temperaturec: number;
  temperaturef: number;
  summary: string;
}

export interface ResponseState {
  isLoaded: boolean;
  items: WeatherState[];
}

const initialState: ResponseState = {
  isLoaded: false,
  items: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const weatherAsync = createAsyncThunk(
  'weather/fetchWeather',
  async () => {
    const response = await fetchWeather();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const weatherSlice = createSlice({
  name: 'weather',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addCase(weatherAsync.fulfilled, (state, action) => {
      state.isLoaded = true;
      state.items += action.payload;
    });
  },
});

export default weatherSlice.reducer;
